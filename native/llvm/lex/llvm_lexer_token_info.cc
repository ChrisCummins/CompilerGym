// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

//=============================================================================
#include "compiler_gym/llvm/lex/llvm_lexer_token_info.h"

using llvm::lltok::Kind;

static int next_kind = 0;

const std::vector<std::string> llvm_lexer_token_category_names = {
    "unknown", "marker", "keyword", "uintval", "strval", "type", "apfloat", "apsint"};

const std::vector<llvm_lexer_token_info> llvm_lexer_tokens = {
    // Markers
    {Kind(next_kind++), marker, "Eof", "<Eof>"},
    {Kind(next_kind++), marker, "Error", "<Error>"},

    // Tokens with no info.
    {Kind(next_kind++), keyword, "dotdotdot", "..."},
    {Kind(next_kind++), keyword, "equal", "="},
    {Kind(next_kind++), keyword, "comma", ","},
    {Kind(next_kind++), keyword, "star", "*"},
    {Kind(next_kind++), keyword, "lsquare", "["},
    {Kind(next_kind++), keyword, "rsquare", "]"},
    {Kind(next_kind++), keyword, "lbrace", "{"},
    {Kind(next_kind++), keyword, "rbrace", "}"},
    {Kind(next_kind++), keyword, "less", "<"},
    {Kind(next_kind++), keyword, "greater", ">"},
    {Kind(next_kind++), keyword, "lparen", "("},
    {Kind(next_kind++), keyword, "rparen", ")"},
    {Kind(next_kind++), keyword, "exclaim", "!"},
    {Kind(next_kind++), keyword, "bar", "|"},
    {Kind(next_kind++), keyword, "colon", ":"},

    {Kind(next_kind++), keyword, "kw_vscale", "vscale"},
    {Kind(next_kind++), keyword, "kw_x", "x"},
    {Kind(next_kind++), keyword, "kw_true", "true"},
    {Kind(next_kind++), keyword, "kw_false", "false"},
    {Kind(next_kind++), keyword, "kw_declare", "declare"},
    {Kind(next_kind++), keyword, "kw_define", "define"},
    {Kind(next_kind++), keyword, "kw_global", "global"},
    {Kind(next_kind++), keyword, "kw_constant", "constant"},

    {Kind(next_kind++), keyword, "kw_dso_local", "dso_local"},
    {Kind(next_kind++), keyword, "kw_dso_preemptable", "dso_preemptable"},

    {Kind(next_kind++), keyword, "kw_private", "private"},
    {Kind(next_kind++), keyword, "kw_internal", "internal"},
    {Kind(next_kind++), keyword, "kw_linkonce", "linkonce"},
    {Kind(next_kind++), keyword, "kw_linkonce_odr", "linkonce_odr"},
    {Kind(next_kind++), keyword, "kw_weak",
     "weak"},  // Used as a linkage, and a modifier for "cmpxchg".
    {Kind(next_kind++), keyword, "kw_weak_odr", "weak_odr"},
    {Kind(next_kind++), keyword, "kw_appending", "appending"},
    {Kind(next_kind++), keyword, "kw_dllimport", "dllimport"},
    {Kind(next_kind++), keyword, "kw_dllexport", "dllexport"},
    {Kind(next_kind++), keyword, "kw_common", "common"},
    {Kind(next_kind++), keyword, "kw_available_externally", "available_externally"},
    {Kind(next_kind++), keyword, "kw_default", "default"},
    {Kind(next_kind++), keyword, "kw_hidden", "hidden"},
    {Kind(next_kind++), keyword, "kw_protected", "protected"},
    {Kind(next_kind++), keyword, "kw_unnamed_addr", "unnamed_addr"},
    {Kind(next_kind++), keyword, "kw_local_unnamed_addr", "local_unnamed_addr"},
    {Kind(next_kind++), keyword, "kw_externally_initialized", "externally_initialized"},
    {Kind(next_kind++), keyword, "kw_extern_weak", "extern_weak"},
    {Kind(next_kind++), keyword, "kw_external", "external"},
    {Kind(next_kind++), keyword, "kw_thread_local", "thread_local"},
    {Kind(next_kind++), keyword, "kw_localdynamic", "localdynamic"},
    {Kind(next_kind++), keyword, "kw_initialexec", "initialexec"},
    {Kind(next_kind++), keyword, "kw_localexec", "localexec"},
    {Kind(next_kind++), keyword, "kw_zeroinitializer", "zeroinitializer"},
    {Kind(next_kind++), keyword, "kw_undef", "undef"},
    {Kind(next_kind++), keyword, "kw_null", "null"},
    {Kind(next_kind++), keyword, "kw_none", "none"},
    {Kind(next_kind++), keyword, "kw_to", "to"},
    {Kind(next_kind++), keyword, "kw_caller", "caller"},
    {Kind(next_kind++), keyword, "kw_within", "within"},
    {Kind(next_kind++), keyword, "kw_from", "from"},
    {Kind(next_kind++), keyword, "kw_tail", "tail"},
    {Kind(next_kind++), keyword, "kw_musttail", "musttail"},
    {Kind(next_kind++), keyword, "kw_notail", "notail"},
    {Kind(next_kind++), keyword, "kw_target", "target"},
    {Kind(next_kind++), keyword, "kw_triple", "triple"},
    {Kind(next_kind++), keyword, "kw_source_filename", "source_filename"},
    {Kind(next_kind++), keyword, "kw_unwind", "unwind"},
    {Kind(next_kind++), keyword, "kw_deplibs", "deplibs"},  // FIXME: Remove in 4.0
    {Kind(next_kind++), keyword, "kw_datalayout", "datalayout"},
    {Kind(next_kind++), keyword, "kw_volatile", "volatile"},
    {Kind(next_kind++), keyword, "kw_atomic", "atomic"},
    {Kind(next_kind++), keyword, "kw_unordered", "unordered"},
    {Kind(next_kind++), keyword, "kw_monotonic", "monotonic"},
    {Kind(next_kind++), keyword, "kw_acquire", "acquire"},
    {Kind(next_kind++), keyword, "kw_release", "release"},
    {Kind(next_kind++), keyword, "kw_acq_rel", "acq_rel"},
    {Kind(next_kind++), keyword, "kw_seq_cst", "seq_cst"},
    {Kind(next_kind++), keyword, "kw_syncscope", "syncscope"},
    {Kind(next_kind++), keyword, "kw_nnan", "nnan"},
    {Kind(next_kind++), keyword, "kw_ninf", "ninf"},
    {Kind(next_kind++), keyword, "kw_nsz", "nsz"},
    {Kind(next_kind++), keyword, "kw_arcp", "arcp"},
    {Kind(next_kind++), keyword, "kw_contract", "contract"},
    {Kind(next_kind++), keyword, "kw_reassoc", "reassoc"},
    {Kind(next_kind++), keyword, "kw_afn", "afn"},
    {Kind(next_kind++), keyword, "kw_fast", "fast"},
    {Kind(next_kind++), keyword, "kw_nuw", "nuw"},
    {Kind(next_kind++), keyword, "kw_nsw", "nsw"},
    {Kind(next_kind++), keyword, "kw_exact", "exact"},
    {Kind(next_kind++), keyword, "kw_inbounds", "inbounds"},
    {Kind(next_kind++), keyword, "kw_inrange", "inrange"},
    {Kind(next_kind++), keyword, "kw_align", "align"},
    {Kind(next_kind++), keyword, "kw_addrspace", "addrspace"},
    {Kind(next_kind++), keyword, "kw_section", "section"},
    {Kind(next_kind++), keyword, "kw_partition", "partition"},
    {Kind(next_kind++), keyword, "kw_alias", "alias"},
    {Kind(next_kind++), keyword, "kw_ifunc", "ifunc"},
    {Kind(next_kind++), keyword, "kw_module", "module"},
    {Kind(next_kind++), keyword, "kw_asm", "asm"},
    {Kind(next_kind++), keyword, "kw_sideeffect", "sideeffect"},
    {Kind(next_kind++), keyword, "kw_alignstack", "alignstack"},
    {Kind(next_kind++), keyword, "kw_inteldialect", "inteldialect"},
    {Kind(next_kind++), keyword, "kw_gc", "gc"},
    {Kind(next_kind++), keyword, "kw_prefix", "prefix"},
    {Kind(next_kind++), keyword, "kw_prologue", "prologue"},
    {Kind(next_kind++), keyword, "kw_c", "c"},

    {Kind(next_kind++), keyword, "kw_cc", "cc"},
    {Kind(next_kind++), keyword, "kw_ccc", "ccc"},
    {Kind(next_kind++), keyword, "kw_fastcc", "fastcc"},
    {Kind(next_kind++), keyword, "kw_coldcc", "coldcc"},
    {Kind(next_kind++), keyword, "kw_intel_ocl_bicc", "intel_ocl_bicc"},
    {Kind(next_kind++), keyword, "kw_cfguard_checkcc", "cfguard_checkcc"},
    {Kind(next_kind++), keyword, "kw_x86_stdcallcc", "x86_stdcallcc"},
    {Kind(next_kind++), keyword, "kw_x86_fastcallcc", "x86_fastcallcc"},
    {Kind(next_kind++), keyword, "kw_x86_thiscallcc", "x86_thiscallcc"},
    {Kind(next_kind++), keyword, "kw_x86_vectorcallcc", "x86_vectorcallcc"},
    {Kind(next_kind++), keyword, "kw_x86_regcallcc", "x86_regcallcc"},
    {Kind(next_kind++), keyword, "kw_arm_apcscc", "arm_apcscc"},
    {Kind(next_kind++), keyword, "kw_arm_aapcscc", "arm_aapcscc"},
    {Kind(next_kind++), keyword, "kw_arm_aapcs_vfpcc", "arm_aapcs_vfpcc"},
    {Kind(next_kind++), keyword, "kw_aarch64_vector_pcs", "aarch64_vector_pcs"},
    {Kind(next_kind++), keyword, "kw_aarch64_sve_vector_pcs", "aarch64_sve_vector_pcs"},
    {Kind(next_kind++), keyword, "kw_msp430_intrcc", "msp430_intrcc"},
    {Kind(next_kind++), keyword, "kw_avr_intrcc", "avr_intrcc"},
    {Kind(next_kind++), keyword, "kw_avr_signalcc", "avr_signalcc"},
    {Kind(next_kind++), keyword, "kw_ptx_kernel", "ptx_kernel"},
    {Kind(next_kind++), keyword, "kw_ptx_device", "ptx_device"},
    {Kind(next_kind++), keyword, "kw_spir_kernel", "spir_kernel"},
    {Kind(next_kind++), keyword, "kw_spir_func", "spir_func"},
    {Kind(next_kind++), keyword, "kw_x86_64_sysvcc", "x86_64_sysvcc"},
    {Kind(next_kind++), keyword, "kw_win64cc", "win64cc"},
    {Kind(next_kind++), keyword, "kw_webkit_jscc", "webkit_jscc"},
    {Kind(next_kind++), keyword, "kw_anyregcc", "anyregcc"},
    {Kind(next_kind++), keyword, "kw_swiftcc", "swiftcc"},
    {Kind(next_kind++), keyword, "kw_preserve_mostcc", "preserve_mostcc"},
    {Kind(next_kind++), keyword, "kw_preserve_allcc", "preserve_allcc"},
    {Kind(next_kind++), keyword, "kw_ghccc", "ghccc"},
    {Kind(next_kind++), keyword, "kw_x86_intrcc", "x86_intrcc"},
    {Kind(next_kind++), keyword, "kw_hhvmcc", "hhvmcc"},
    {Kind(next_kind++), keyword, "kw_hhvm_ccc", "hhvm_ccc"},
    {Kind(next_kind++), keyword, "kw_cxx_fast_tlscc", "cxx_fast_tlscc"},
    {Kind(next_kind++), keyword, "kw_amdgpu_vs", "amdgpu_vs"},
    {Kind(next_kind++), keyword, "kw_amdgpu_ls", "amdgpu_ls"},
    {Kind(next_kind++), keyword, "kw_amdgpu_hs", "amdgpu_hs"},
    {Kind(next_kind++), keyword, "kw_amdgpu_es", "amdgpu_es"},
    {Kind(next_kind++), keyword, "kw_amdgpu_gs", "amdgpu_gs"},
    {Kind(next_kind++), keyword, "kw_amdgpu_ps", "amdgpu_ps"},
    {Kind(next_kind++), keyword, "kw_amdgpu_cs", "amdgpu_cs"},
    {Kind(next_kind++), keyword, "kw_amdgpu_kernel", "amdgpu_kernel"},
    {Kind(next_kind++), keyword, "kw_tailcc", "tailcc"},

    // Attributes
    {Kind(next_kind++), keyword, "kw_attributes", "attributes"},
    {Kind(next_kind++), keyword, "kw_allocsize", "allocsize"},
    {Kind(next_kind++), keyword, "kw_alwaysinline", "alwaysinline"},
    {Kind(next_kind++), keyword, "kw_argmemonly", "argmemonly"},
    {Kind(next_kind++), keyword, "kw_sanitize_address", "sanitize_address"},
    {Kind(next_kind++), keyword, "kw_sanitize_hwaddress", "sanitize_hwaddress"},
    {Kind(next_kind++), keyword, "kw_sanitize_memtag", "sanitize_memtag"},
    {Kind(next_kind++), keyword, "kw_builtin", "builtin"},
    {Kind(next_kind++), keyword, "kw_byval", "byval"},
    {Kind(next_kind++), keyword, "kw_inalloca", "inalloca"},
    {Kind(next_kind++), keyword, "kw_cold", "cold"},
    {Kind(next_kind++), keyword, "kw_convergent", "convergent"},
    {Kind(next_kind++), keyword, "kw_dereferenceable", "dereferenceable"},
    {Kind(next_kind++), keyword, "kw_dereferenceable_or_null", "dereferenceable_or_null"},
    {Kind(next_kind++), keyword, "kw_inaccessiblememonly", "inaccessiblememonly"},
    {Kind(next_kind++), keyword, "kw_inaccessiblemem_or_argmemonly",
     "inaccessiblemem_or_argmemonly"},
    {Kind(next_kind++), keyword, "kw_inlinehint", "inlinehint"},
    {Kind(next_kind++), keyword, "kw_inreg", "inreg"},
    {Kind(next_kind++), keyword, "kw_jumptable", "jumptable"},
    {Kind(next_kind++), keyword, "kw_minsize", "minsize"},
    {Kind(next_kind++), keyword, "kw_naked", "naked"},
    {Kind(next_kind++), keyword, "kw_nest", "nest"},
    {Kind(next_kind++), keyword, "kw_noalias", "noalias"},
    {Kind(next_kind++), keyword, "kw_nobuiltin", "nobuiltin"},
    {Kind(next_kind++), keyword, "kw_nocapture", "nocapture"},
    {Kind(next_kind++), keyword, "kw_noduplicate", "noduplicate"},
    {Kind(next_kind++), keyword, "kw_nofree", "nofree"},
    {Kind(next_kind++), keyword, "kw_noimplicitfloat", "noimplicitfloat"},
    {Kind(next_kind++), keyword, "kw_noinline", "noinline"},
    {Kind(next_kind++), keyword, "kw_norecurse", "norecurse"},
    {Kind(next_kind++), keyword, "kw_nonlazybind", "nonlazybind"},
    {Kind(next_kind++), keyword, "kw_nonnull", "nonnull"},
    {Kind(next_kind++), keyword, "kw_noredzone", "noredzone"},
    {Kind(next_kind++), keyword, "kw_noreturn", "noreturn"},
    {Kind(next_kind++), keyword, "kw_nosync", "nosync"},
    {Kind(next_kind++), keyword, "kw_nocf_check", "nocf_check"},
    {Kind(next_kind++), keyword, "kw_nounwind", "nounwind"},
    {Kind(next_kind++), keyword, "kw_optforfuzzing", "optforfuzzing"},
    {Kind(next_kind++), keyword, "kw_optnone", "optnone"},
    {Kind(next_kind++), keyword, "kw_optsize", "optsize"},
    {Kind(next_kind++), keyword, "kw_readnone", "readnone"},
    {Kind(next_kind++), keyword, "kw_readonly", "readonly"},
    {Kind(next_kind++), keyword, "kw_returned", "returned"},
    {Kind(next_kind++), keyword, "kw_returns_twice", "returns_twice"},
    {Kind(next_kind++), keyword, "kw_signext", "signext"},
    {Kind(next_kind++), keyword, "kw_speculatable", "speculatable"},
    {Kind(next_kind++), keyword, "kw_ssp", "ssp"},
    {Kind(next_kind++), keyword, "kw_sspreq", "sspreq"},
    {Kind(next_kind++), keyword, "kw_sspstrong", "sspstrong"},
    {Kind(next_kind++), keyword, "kw_safestack", "safestack"},
    {Kind(next_kind++), keyword, "kw_shadowcallstack", "shadowcallstack"},
    {Kind(next_kind++), keyword, "kw_sret", "sret"},
    {Kind(next_kind++), keyword, "kw_sanitize_thread", "sanitize_thread"},
    {Kind(next_kind++), keyword, "kw_sanitize_memory", "sanitize_memory"},
    {Kind(next_kind++), keyword, "kw_speculative_load_hardening", "speculative_load_hardening"},
    {Kind(next_kind++), keyword, "kw_strictfp", "strictfp"},
    {Kind(next_kind++), keyword, "kw_swifterror", "swifterror"},
    {Kind(next_kind++), keyword, "kw_swiftself", "swiftself"},
    {Kind(next_kind++), keyword, "kw_uwtable", "uwtable"},
    {Kind(next_kind++), keyword, "kw_willreturn", "willreturn"},
    {Kind(next_kind++), keyword, "kw_writeonly", "writeonly"},
    {Kind(next_kind++), keyword, "kw_zeroext", "zeroext"},
    {Kind(next_kind++), keyword, "kw_immarg", "immarg"},

    {Kind(next_kind++), keyword, "kw_type", "type"},
    {Kind(next_kind++), keyword, "kw_opaque", "opaque"},

    {Kind(next_kind++), keyword, "kw_comdat", "comdat"},

    // Comdat_types
    {Kind(next_kind++), keyword, "kw_any", "any"},
    {Kind(next_kind++), keyword, "kw_exactmatch", "exactmatch"},
    {Kind(next_kind++), keyword, "kw_largest", "largest"},
    {Kind(next_kind++), keyword, "kw_noduplicates", "noduplicates"},
    {Kind(next_kind++), keyword, "kw_samesize", "samesize"},

    {Kind(next_kind++), keyword, "kw_eq", "eq"},
    {Kind(next_kind++), keyword, "kw_ne", "ne"},
    {Kind(next_kind++), keyword, "kw_slt", "slt"},
    {Kind(next_kind++), keyword, "kw_sgt", "sgt"},
    {Kind(next_kind++), keyword, "kw_sle", "sle"},
    {Kind(next_kind++), keyword, "kw_sge", "sge"},
    {Kind(next_kind++), keyword, "kw_ult", "ult"},
    {Kind(next_kind++), keyword, "kw_ugt", "ugt"},
    {Kind(next_kind++), keyword, "kw_ule", "ule"},
    {Kind(next_kind++), keyword, "kw_uge", "uge"},
    {Kind(next_kind++), keyword, "kw_oeq", "oeq"},
    {Kind(next_kind++), keyword, "kw_one", "one"},
    {Kind(next_kind++), keyword, "kw_olt", "olt"},
    {Kind(next_kind++), keyword, "kw_ogt", "ogt"},
    {Kind(next_kind++), keyword, "kw_ole", "ole"},
    {Kind(next_kind++), keyword, "kw_oge", "oge"},
    {Kind(next_kind++), keyword, "kw_ord", "ord"},
    {Kind(next_kind++), keyword, "kw_uno", "uno"},
    {Kind(next_kind++), keyword, "kw_ueq", "ueq"},
    {Kind(next_kind++), keyword, "kw_une", "une"},

    // atomicrmw_operations_that_arent_also_instruction_keywords
    {Kind(next_kind++), keyword, "kw_xchg", "xchg"},
    {Kind(next_kind++), keyword, "kw_nand", "nand"},
    {Kind(next_kind++), keyword, "kw_max", "max"},
    {Kind(next_kind++), keyword, "kw_min", "min"},
    {Kind(next_kind++), keyword, "kw_umax", "umax"},
    {Kind(next_kind++), keyword, "kw_umin", "umin"},

    // Instruction_Opcodes_Opcode_in_UIntVal
    {Kind(next_kind++), keyword, "kw_fneg", "fneg"},
    {Kind(next_kind++), keyword, "kw_add", "add"},
    {Kind(next_kind++), keyword, "kw_fadd", "fadd"},
    {Kind(next_kind++), keyword, "kw_sub", "sub"},
    {Kind(next_kind++), keyword, "kw_fsub", "fsub"},
    {Kind(next_kind++), keyword, "kw_mul", "mul"},
    {Kind(next_kind++), keyword, "kw_fmul", "fmul"},
    {Kind(next_kind++), keyword, "kw_udiv", "udiv"},
    {Kind(next_kind++), keyword, "kw_sdiv", "sdiv"},
    {Kind(next_kind++), keyword, "kw_fdiv", "fdiv"},
    {Kind(next_kind++), keyword, "kw_urem", "urem"},
    {Kind(next_kind++), keyword, "kw_srem", "srem"},
    {Kind(next_kind++), keyword, "kw_frem", "frem"},
    {Kind(next_kind++), keyword, "kw_shl", "shl"},
    {Kind(next_kind++), keyword, "kw_lshr", "lshr"},
    {Kind(next_kind++), keyword, "kw_ashr", "ashr"},
    {Kind(next_kind++), keyword, "kw_and", "and"},
    {Kind(next_kind++), keyword, "kw_or", "or"},
    {Kind(next_kind++), keyword, "kw_xor", "xor"},
    {Kind(next_kind++), keyword, "kw_icmp", "icmp"},
    {Kind(next_kind++), keyword, "kw_fcmp", "fcmp"},

    {Kind(next_kind++), keyword, "kw_phi", "phi"},
    {Kind(next_kind++), keyword, "kw_call", "call"},
    {Kind(next_kind++), keyword, "kw_trunc", "trunc"},
    {Kind(next_kind++), keyword, "kw_zext", "zext"},
    {Kind(next_kind++), keyword, "kw_sext", "sext"},
    {Kind(next_kind++), keyword, "kw_fptrunc", "fptrunc"},
    {Kind(next_kind++), keyword, "kw_fpext", "fpext"},
    {Kind(next_kind++), keyword, "kw_uitofp", "uitofp"},
    {Kind(next_kind++), keyword, "kw_sitofp", "sitofp"},
    {Kind(next_kind++), keyword, "kw_fptoui", "fptoui"},
    {Kind(next_kind++), keyword, "kw_fptosi", "fptosi"},
    {Kind(next_kind++), keyword, "kw_inttoptr", "inttoptr"},
    {Kind(next_kind++), keyword, "kw_ptrtoint", "ptrtoint"},
    {Kind(next_kind++), keyword, "kw_bitcast", "bitcast"},
    {Kind(next_kind++), keyword, "kw_addrspacecast", "addrspacecast"},
    {Kind(next_kind++), keyword, "kw_select", "select"},
    {Kind(next_kind++), keyword, "kw_va_arg", "va_arg"},

    {Kind(next_kind++), keyword, "kw_landingpad", "landingpad"},
    {Kind(next_kind++), keyword, "kw_personality", "personality"},
    {Kind(next_kind++), keyword, "kw_cleanup", "cleanup"},
    {Kind(next_kind++), keyword, "kw_catch", "catch"},
    {Kind(next_kind++), keyword, "kw_filter", "filter"},

    {Kind(next_kind++), keyword, "kw_ret", "ret"},
    {Kind(next_kind++), keyword, "kw_br", "br"},
    {Kind(next_kind++), keyword, "kw_switch", "switch"},
    {Kind(next_kind++), keyword, "kw_indirectbr", "indirectbr"},
    {Kind(next_kind++), keyword, "kw_invoke", "invoke"},
    {Kind(next_kind++), keyword, "kw_resume", "resume"},
    {Kind(next_kind++), keyword, "kw_unreachable", "unreachable"},
    {Kind(next_kind++), keyword, "kw_cleanupret", "cleanupret"},
    {Kind(next_kind++), keyword, "kw_catchswitch", "catchswitch"},
    {Kind(next_kind++), keyword, "kw_catchret", "catchret"},
    {Kind(next_kind++), keyword, "kw_catchpad", "catchpad"},
    {Kind(next_kind++), keyword, "kw_cleanuppad", "cleanuppad"},
    {Kind(next_kind++), keyword, "kw_callbr", "callbr"},

    {Kind(next_kind++), keyword, "kw_alloca", "alloca"},
    {Kind(next_kind++), keyword, "kw_load", "load"},
    {Kind(next_kind++), keyword, "kw_store", "store"},
    {Kind(next_kind++), keyword, "kw_fence", "fence"},
    {Kind(next_kind++), keyword, "kw_cmpxchg", "cmpxchg"},
    {Kind(next_kind++), keyword, "kw_atomicrmw", "atomicrmw"},
    {Kind(next_kind++), keyword, "kw_getelementptr", "getelementptr"},

    {Kind(next_kind++), keyword, "kw_extractelement", "extractelement"},
    {Kind(next_kind++), keyword, "kw_insertelement", "insertelement"},
    {Kind(next_kind++), keyword, "kw_shufflevector", "shufflevector"},
    {Kind(next_kind++), keyword, "kw_extractvalue", "extractvalue"},
    {Kind(next_kind++), keyword, "kw_insertvalue", "insertvalue"},
    {Kind(next_kind++), keyword, "kw_blockaddress", "blockaddress"},

    {Kind(next_kind++), keyword, "kw_freeze", "freeze"},

    // Metadata_types
    {Kind(next_kind++), keyword, "kw_distinct", "distinct"},

    // Use_list_order_directives
    {Kind(next_kind++), keyword, "kw_uselistorder", "uselistorder"},
    {Kind(next_kind++), keyword, "kw_uselistorder_bb", "uselistorder_bb"},

    // Summary_index_keywords
    {Kind(next_kind++), keyword, "kw_path", "path"},
    {Kind(next_kind++), keyword, "kw_hash", "hash"},
    {Kind(next_kind++), keyword, "kw_gv", "gv"},
    {Kind(next_kind++), keyword, "kw_guid", "guid"},
    {Kind(next_kind++), keyword, "kw_name", "name"},
    {Kind(next_kind++), keyword, "kw_summaries", "summaries"},
    {Kind(next_kind++), keyword, "kw_flags", "flags"},
    {Kind(next_kind++), keyword, "kw_linkage", "linkage"},
    {Kind(next_kind++), keyword, "kw_notEligibleToImport", "notEligibleToImport"},
    {Kind(next_kind++), keyword, "kw_live", "live"},
    {Kind(next_kind++), keyword, "kw_dsoLocal", "dsoLocal"},
    {Kind(next_kind++), keyword, "kw_canAutoHide", "canAutoHide"},
    {Kind(next_kind++), keyword, "kw_function", "function"},
    {Kind(next_kind++), keyword, "kw_insts", "insts"},
    {Kind(next_kind++), keyword, "kw_funcFlags", "funcFlags"},
    {Kind(next_kind++), keyword, "kw_readNone", "readNone"},
    {Kind(next_kind++), keyword, "kw_readOnly", "readOnly"},
    {Kind(next_kind++), keyword, "kw_noRecurse", "noRecurse"},
    {Kind(next_kind++), keyword, "kw_returnDoesNotAlias", "returnDoesNotAlias"},
    {Kind(next_kind++), keyword, "kw_noInline", "noInline"},
    {Kind(next_kind++), keyword, "kw_alwaysInline", "alwaysInline"},
    {Kind(next_kind++), keyword, "kw_calls", "calls"},
    {Kind(next_kind++), keyword, "kw_callee", "callee"},
    {Kind(next_kind++), keyword, "kw_hotness", "hotness"},
    {Kind(next_kind++), keyword, "kw_unknown", "unknown"},
    {Kind(next_kind++), keyword, "kw_hot", "hot"},
    {Kind(next_kind++), keyword, "kw_critical", "critical"},
    {Kind(next_kind++), keyword, "kw_relbf", "relbf"},
    {Kind(next_kind++), keyword, "kw_variable", "variable"},
    {Kind(next_kind++), keyword, "kw_vTableFuncs", "vTableFuncs"},
    {Kind(next_kind++), keyword, "kw_virtFunc", "virtFunc"},
    {Kind(next_kind++), keyword, "kw_aliasee", "aliasee"},
    {Kind(next_kind++), keyword, "kw_refs", "refs"},
    {Kind(next_kind++), keyword, "kw_typeIdInfo", "typeIdInfo"},
    {Kind(next_kind++), keyword, "kw_typeTests", "typeTests"},
    {Kind(next_kind++), keyword, "kw_typeTestAssumeVCalls", "typeTestAssumeVCalls"},
    {Kind(next_kind++), keyword, "kw_typeCheckedLoadVCalls", "typeCheckedLoadVCalls"},
    {Kind(next_kind++), keyword, "kw_typeTestAssumeConstVCalls", "typeTestAssumeConstVCalls"},
    {Kind(next_kind++), keyword, "kw_typeCheckedLoadConstVCalls", "typeCheckedLoadConstVCalls"},
    {Kind(next_kind++), keyword, "kw_vFuncId", "vFuncId"},
    {Kind(next_kind++), keyword, "kw_offset", "offset"},
    {Kind(next_kind++), keyword, "kw_args", "args"},
    {Kind(next_kind++), keyword, "kw_typeid", "typeid"},
    {Kind(next_kind++), keyword, "kw_typeidCompatibleVTable", "typeidCompatibleVTable"},
    {Kind(next_kind++), keyword, "kw_summary", "summary"},
    {Kind(next_kind++), keyword, "kw_typeTestRes", "typeTestRes"},
    {Kind(next_kind++), keyword, "kw_kind", "kind"},
    {Kind(next_kind++), keyword, "kw_unsat", "unsat"},
    {Kind(next_kind++), keyword, "kw_byteArray", "byteArray"},
    {Kind(next_kind++), keyword, "kw_inline", "inline"},
    {Kind(next_kind++), keyword, "kw_single", "single"},
    {Kind(next_kind++), keyword, "kw_allOnes", "allOnes"},
    {Kind(next_kind++), keyword, "kw_sizeM1BitWidth", "sizeM1BitWidth"},
    {Kind(next_kind++), keyword, "kw_alignLog2", "alignLog2"},
    {Kind(next_kind++), keyword, "kw_sizeM1", "sizeM1"},
    {Kind(next_kind++), keyword, "kw_bitMask", "bitMask"},
    {Kind(next_kind++), keyword, "kw_inlineBits", "inlineBits"},
    {Kind(next_kind++), keyword, "kw_wpdResolutions", "wpdResolutions"},
    {Kind(next_kind++), keyword, "kw_wpdRes", "wpdRes"},
    {Kind(next_kind++), keyword, "kw_indir", "indir"},
    {Kind(next_kind++), keyword, "kw_singleImpl", "singleImpl"},
    {Kind(next_kind++), keyword, "kw_branchFunnel", "branchFunnel"},
    {Kind(next_kind++), keyword, "kw_singleImplName", "singleImplName"},
    {Kind(next_kind++), keyword, "kw_resByArg", "resByArg"},
    {Kind(next_kind++), keyword, "kw_byArg", "byArg"},
    {Kind(next_kind++), keyword, "kw_uniformRetVal", "uniformRetVal"},
    {Kind(next_kind++), keyword, "kw_uniqueRetVal", "uniqueRetVal"},
    {Kind(next_kind++), keyword, "kw_virtualConstProp", "virtualConstProp"},
    {Kind(next_kind++), keyword, "kw_info", "info"},
    {Kind(next_kind++), keyword, "kw_byte", "byte"},
    {Kind(next_kind++), keyword, "kw_bit", "bit"},
    {Kind(next_kind++), keyword, "kw_varFlags", "varFlags"},

    // Unsigned Valued tokens (UIntVal).
    {Kind(next_kind++), uintval, "LabelID", ":"},     // 42:
    {Kind(next_kind++), uintval, "GlobalID", "@"},    // @42
    {Kind(next_kind++), uintval, "LocalVarID", "%"},  // %42
    {Kind(next_kind++), uintval, "AttrGrpID", "#"},   // #42
    {Kind(next_kind++), uintval, "SummaryID", "^"},   // ^42

    // String valued tokens (StrVal).
    {Kind(next_kind++), strval, "LabelStr", ":"},                      // foo:
    {Kind(next_kind++), strval, "GlobalVar", "@"},                     // @foo @"foo"
    {Kind(next_kind++), strval, "ComdatVar", "$"},                     // $foo
    {Kind(next_kind++), strval, "LocalVar", "%"},                      // %foo %"foo"
    {Kind(next_kind++), strval, "MetadataVar", "!"},                   // !foo
    {Kind(next_kind++), strval, "StringConstant", ""},                 // "foo"
    {Kind(next_kind++), strval, "DwarfTag", "DW_TAG_"},                // DW_TAG_foo
    {Kind(next_kind++), strval, "DwarfAttEncoding", "DW_ATE_"},        // DW_ATE_foo
    {Kind(next_kind++), strval, "DwarfVirtuality", "DW_VIRTUALITY_"},  // DW_VIRTUALITY_foo
    {Kind(next_kind++), strval, "DwarfLang", "DW_LANG_"},              // DW_LANG_foo
    {Kind(next_kind++), strval, "DwarfCC", "DW_CC_"},                  // DW_CC_foo
    {Kind(next_kind++), strval, "EmissionKind", "<Emission>"},         // lineTablesOnly
    {Kind(next_kind++), strval, "NameTableKind", "<NameTable>"},       // GNU
    {Kind(next_kind++), strval, "DwarfOp", "DW_OP_"},                  // DW_OP_foo
    {Kind(next_kind++), strval, "DIFlag", "DIFlag"},                   // DIFlagFoo
    {Kind(next_kind++), strval, "DISPFlag", "DISPFlag"},               // DISPFlagFoo
    {Kind(next_kind++), strval, "DwarfMacinfo", "DW_MACINFO_"},        // DW_MACINFO_foo
    {Kind(next_kind++), strval, "ChecksumKind", "CSK_"},               // CSK_foo

    // Type valued tokens (TyVal).
    {Kind(next_kind++), type, "Type", "type"},

    {Kind(next_kind++), apfloat, "APFloat", "APFloat"},  // APFloatVal
    {Kind(next_kind++), apsint, "APSInt", "APSInt"},     // APSInt
};
