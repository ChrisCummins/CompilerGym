// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.
//
// This file was automatically generated by make_action_space_sources.py.

#define HANDLE_ACTION(action, handlePass)                         \
  switch (action) {                                               \
    case CompilerGymPass::ADCEPASS:                               \
      handlePass(llvm::ADCEPass());                               \
      break;                                                      \
    case CompilerGymPass::ADD_DISCRIMINATORS_PASS:                \
      handlePass(llvm::AddDiscriminatorsPass());                  \
      break;                                                      \
    case CompilerGymPass::AGGRESSIVE_INST_COMBINE_PASS:           \
      handlePass(llvm::AggressiveInstCombinePass());              \
      break;                                                      \
    case CompilerGymPass::ALIGNMENT_FROM_ASSUMPTIONS_PASS:        \
      handlePass(llvm::AlignmentFromAssumptionsPass());           \
      break;                                                      \
    case CompilerGymPass::ALWAYS_INLINER_PASS:                    \
      handlePass(llvm::AlwaysInlinerPass());                      \
      break;                                                      \
    case CompilerGymPass::ANNOTATION2METADATA_PASS:               \
      handlePass(llvm::Annotation2MetadataPass());                \
      break;                                                      \
    case CompilerGymPass::ANNOTATION_REMARKS_PASS:                \
      handlePass(llvm::AnnotationRemarksPass());                  \
      break;                                                      \
    case CompilerGymPass::ASSUME_BUILDER_PASS:                    \
      handlePass(llvm::AssumeBuilderPass());                      \
      break;                                                      \
    case CompilerGymPass::ASSUME_SIMPLIFY_PASS:                   \
      handlePass(llvm::AssumeSimplifyPass());                     \
      break;                                                      \
    case CompilerGymPass::ATTRIBUTOR_PASS:                        \
      handlePass(llvm::AttributorPass());                         \
      break;                                                      \
    case CompilerGymPass::BDCEPASS:                               \
      handlePass(llvm::BDCEPass());                               \
      break;                                                      \
    case CompilerGymPass::BLOCK_EXTRACTOR_PASS:                   \
      handlePass(llvm::BlockExtractorPass());                     \
      break;                                                      \
    case CompilerGymPass::BREAK_CRITICAL_EDGES_PASS:              \
      handlePass(llvm::BreakCriticalEdgesPass());                 \
      break;                                                      \
    case CompilerGymPass::CALL_SITE_SPLITTING_PASS:               \
      handlePass(llvm::CallSiteSplittingPass());                  \
      break;                                                      \
    case CompilerGymPass::CALLED_VALUE_PROPAGATION_PASS:          \
      handlePass(llvm::CalledValuePropagationPass());             \
      break;                                                      \
    case CompilerGymPass::CANONICALIZE_ALIASES_PASS:              \
      handlePass(llvm::CanonicalizeAliasesPass());                \
      break;                                                      \
    case CompilerGymPass::CONSTANT_HOISTING_PASS:                 \
      handlePass(llvm::ConstantHoistingPass());                   \
      break;                                                      \
    case CompilerGymPass::CONSTANT_MERGE_PASS:                    \
      handlePass(llvm::ConstantMergePass());                      \
      break;                                                      \
    case CompilerGymPass::CONSTRAINT_ELIMINATION_PASS:            \
      handlePass(llvm::ConstraintEliminationPass());              \
      break;                                                      \
    case CompilerGymPass::CORO_CLEANUP_PASS:                      \
      handlePass(llvm::CoroCleanupPass());                        \
      break;                                                      \
    case CompilerGymPass::CORO_EARLY_PASS:                        \
      handlePass(llvm::CoroEarlyPass());                          \
      break;                                                      \
    case CompilerGymPass::CORO_ELIDE_PASS:                        \
      handlePass(llvm::CoroElidePass());                          \
      break;                                                      \
    case CompilerGymPass::CORRELATED_VALUE_PROPAGATION_PASS:      \
      handlePass(llvm::CorrelatedValuePropagationPass());         \
      break;                                                      \
    case CompilerGymPass::CROSS_DSOCFIPASS:                       \
      handlePass(llvm::CrossDSOCFIPass());                        \
      break;                                                      \
    case CompilerGymPass::DCEPASS:                                \
      handlePass(llvm::DCEPass());                                \
      break;                                                      \
    case CompilerGymPass::DFAJUMP_THREADING_PASS:                 \
      handlePass(llvm::DFAJumpThreadingPass());                   \
      break;                                                      \
    case CompilerGymPass::DSEPASS:                                \
      handlePass(llvm::DSEPass());                                \
      break;                                                      \
    case CompilerGymPass::DEAD_ARGUMENT_ELIMINATION_PASS:         \
      handlePass(llvm::DeadArgumentEliminationPass());            \
      break;                                                      \
    case CompilerGymPass::DIV_REM_PAIRS_PASS:                     \
      handlePass(llvm::DivRemPairsPass());                        \
      break;                                                      \
    case CompilerGymPass::EARLY_CSEPASS:                          \
      handlePass(llvm::EarlyCSEPass());                           \
      break;                                                      \
    case CompilerGymPass::ELIMINATE_AVAILABLE_EXTERNALLY_PASS:    \
      handlePass(llvm::EliminateAvailableExternallyPass());       \
      break;                                                      \
    case CompilerGymPass::FIX_IRREDUCIBLE_PASS:                   \
      handlePass(llvm::FixIrreduciblePass());                     \
      break;                                                      \
    case CompilerGymPass::FLOAT2INT_PASS:                         \
      handlePass(llvm::Float2IntPass());                          \
      break;                                                      \
    case CompilerGymPass::FORCE_FUNCTION_ATTRS_PASS:              \
      handlePass(llvm::ForceFunctionAttrsPass());                 \
      break;                                                      \
    case CompilerGymPass::FUNCTION_IMPORT_PASS:                   \
      handlePass(llvm::FunctionImportPass());                     \
      break;                                                      \
    case CompilerGymPass::FUNCTION_SPECIALIZATION_PASS:           \
      handlePass(llvm::FunctionSpecializationPass());             \
      break;                                                      \
    case CompilerGymPass::GVN:                                    \
      handlePass(llvm::GVN());                                    \
      break;                                                      \
    case CompilerGymPass::GVNHOIST_PASS:                          \
      handlePass(llvm::GVNHoistPass());                           \
      break;                                                      \
    case CompilerGymPass::GVNSINK_PASS:                           \
      handlePass(llvm::GVNSinkPass());                            \
      break;                                                      \
    case CompilerGymPass::GLOBAL_DCEPASS:                         \
      handlePass(llvm::GlobalDCEPass());                          \
      break;                                                      \
    case CompilerGymPass::GLOBAL_OPT_PASS:                        \
      handlePass(llvm::GlobalOptPass());                          \
      break;                                                      \
    case CompilerGymPass::GLOBAL_SPLIT_PASS:                      \
      handlePass(llvm::GlobalSplitPass());                        \
      break;                                                      \
    case CompilerGymPass::GUARD_WIDENING_PASS:                    \
      handlePass(llvm::GuardWideningPass());                      \
      break;                                                      \
    case CompilerGymPass::HELLO_WORLD_PASS:                       \
      handlePass(llvm::HelloWorldPass());                         \
      break;                                                      \
    case CompilerGymPass::HOT_COLD_SPLITTING_PASS:                \
      handlePass(llvm::HotColdSplittingPass());                   \
      break;                                                      \
    case CompilerGymPass::IPSCCPPASS:                             \
      handlePass(llvm::IPSCCPPass());                             \
      break;                                                      \
    case CompilerGymPass::IRCEPASS:                               \
      handlePass(llvm::IRCEPass());                               \
      break;                                                      \
    case CompilerGymPass::IROUTLINER_PASS:                        \
      handlePass(llvm::IROutlinerPass());                         \
      break;                                                      \
    case CompilerGymPass::INFER_ADDRESS_SPACES_PASS:              \
      handlePass(llvm::InferAddressSpacesPass());                 \
      break;                                                      \
    case CompilerGymPass::INFER_FUNCTION_ATTRS_PASS:              \
      handlePass(llvm::InferFunctionAttrsPass());                 \
      break;                                                      \
    case CompilerGymPass::INJECT_TLIMAPPINGS:                     \
      handlePass(llvm::InjectTLIMappings());                      \
      break;                                                      \
    case CompilerGymPass::INST_COMBINE_PASS:                      \
      handlePass(llvm::InstCombinePass());                        \
      break;                                                      \
    case CompilerGymPass::INST_SIMPLIFY_PASS:                     \
      handlePass(llvm::InstSimplifyPass());                       \
      break;                                                      \
    case CompilerGymPass::INSTRUCTION_NAMER_PASS:                 \
      handlePass(llvm::InstructionNamerPass());                   \
      break;                                                      \
    case CompilerGymPass::INTERNALIZE_PASS:                       \
      handlePass(llvm::InternalizePass());                        \
      break;                                                      \
    case CompilerGymPass::JUMP_THREADING_PASS:                    \
      handlePass(llvm::JumpThreadingPass());                      \
      break;                                                      \
    case CompilerGymPass::LCSSAPASS:                              \
      handlePass(llvm::LCSSAPass());                              \
      break;                                                      \
    case CompilerGymPass::LIB_CALLS_SHRINK_WRAP_PASS:             \
      handlePass(llvm::LibCallsShrinkWrapPass());                 \
      break;                                                      \
    case CompilerGymPass::LOAD_STORE_VECTORIZER_PASS:             \
      handlePass(llvm::LoadStoreVectorizerPass());                \
      break;                                                      \
    case CompilerGymPass::LOOP_DATA_PREFETCH_PASS:                \
      handlePass(llvm::LoopDataPrefetchPass());                   \
      break;                                                      \
    case CompilerGymPass::LOOP_DISTRIBUTE_PASS:                   \
      handlePass(llvm::LoopDistributePass());                     \
      break;                                                      \
    case CompilerGymPass::LOOP_EXTRACTOR_PASS:                    \
      handlePass(llvm::LoopExtractorPass());                      \
      break;                                                      \
    case CompilerGymPass::LOOP_FUSE_PASS:                         \
      handlePass(llvm::LoopFusePass());                           \
      break;                                                      \
    case CompilerGymPass::LOOP_LOAD_ELIMINATION_PASS:             \
      handlePass(llvm::LoopLoadEliminationPass());                \
      break;                                                      \
    case CompilerGymPass::LOOP_SIMPLIFY_PASS:                     \
      handlePass(llvm::LoopSimplifyPass());                       \
      break;                                                      \
    case CompilerGymPass::LOOP_SINK_PASS:                         \
      handlePass(llvm::LoopSinkPass());                           \
      break;                                                      \
    case CompilerGymPass::LOOP_UNROLL_PASS:                       \
      handlePass(llvm::LoopUnrollPass());                         \
      break;                                                      \
    case CompilerGymPass::LOOP_VECTORIZE_PASS:                    \
      handlePass(llvm::LoopVectorizePass());                      \
      break;                                                      \
    case CompilerGymPass::LOOP_VERSIONING_PASS:                   \
      handlePass(llvm::LoopVersioningPass());                     \
      break;                                                      \
    case CompilerGymPass::LOWER_ATOMIC_PASS:                      \
      handlePass(llvm::LowerAtomicPass());                        \
      break;                                                      \
    case CompilerGymPass::LOWER_CONSTANT_INTRINSICS_PASS:         \
      handlePass(llvm::LowerConstantIntrinsicsPass());            \
      break;                                                      \
    case CompilerGymPass::LOWER_EXPECT_INTRINSIC_PASS:            \
      handlePass(llvm::LowerExpectIntrinsicPass());               \
      break;                                                      \
    case CompilerGymPass::LOWER_GUARD_INTRINSIC_PASS:             \
      handlePass(llvm::LowerGuardIntrinsicPass());                \
      break;                                                      \
    case CompilerGymPass::LOWER_INVOKE_PASS:                      \
      handlePass(llvm::LowerInvokePass());                        \
      break;                                                      \
    case CompilerGymPass::LOWER_MATRIX_INTRINSICS_PASS:           \
      handlePass(llvm::LowerMatrixIntrinsicsPass());              \
      break;                                                      \
    case CompilerGymPass::LOWER_SWITCH_PASS:                      \
      handlePass(llvm::LowerSwitchPass());                        \
      break;                                                      \
    case CompilerGymPass::LOWER_TYPE_TESTS_PASS:                  \
      handlePass(llvm::LowerTypeTestsPass());                     \
      break;                                                      \
    case CompilerGymPass::LOWER_WIDENABLE_CONDITION_PASS:         \
      handlePass(llvm::LowerWidenableConditionPass());            \
      break;                                                      \
    case CompilerGymPass::MAKE_GUARDS_EXPLICIT_PASS:              \
      handlePass(llvm::MakeGuardsExplicitPass());                 \
      break;                                                      \
    case CompilerGymPass::MEM_CPY_OPT_PASS:                       \
      handlePass(llvm::MemCpyOptPass());                          \
      break;                                                      \
    case CompilerGymPass::MERGE_FUNCTIONS_PASS:                   \
      handlePass(llvm::MergeFunctionsPass());                     \
      break;                                                      \
    case CompilerGymPass::MERGE_ICMPS_PASS:                       \
      handlePass(llvm::MergeICmpsPass());                         \
      break;                                                      \
    case CompilerGymPass::MERGED_LOAD_STORE_MOTION_PASS:          \
      handlePass(llvm::MergedLoadStoreMotionPass());              \
      break;                                                      \
    case CompilerGymPass::META_RENAMER_PASS:                      \
      handlePass(llvm::MetaRenamerPass());                        \
      break;                                                      \
    case CompilerGymPass::MODULE_INLINER_WRAPPER_PASS:            \
      handlePass(llvm::ModuleInlinerWrapperPass());               \
      break;                                                      \
    case CompilerGymPass::NAME_ANON_GLOBAL_PASS:                  \
      handlePass(llvm::NameAnonGlobalPass());                     \
      break;                                                      \
    case CompilerGymPass::NARY_REASSOCIATE_PASS:                  \
      handlePass(llvm::NaryReassociatePass());                    \
      break;                                                      \
    case CompilerGymPass::NEW_GVNPASS:                            \
      handlePass(llvm::NewGVNPass());                             \
      break;                                                      \
    case CompilerGymPass::OBJ_CARCAPELIM_PASS:                    \
      handlePass(llvm::ObjCARCAPElimPass());                      \
      break;                                                      \
    case CompilerGymPass::OBJ_CARCCONTRACT_PASS:                  \
      handlePass(llvm::ObjCARCContractPass());                    \
      break;                                                      \
    case CompilerGymPass::OBJ_CARCEXPAND_PASS:                    \
      handlePass(llvm::ObjCARCExpandPass());                      \
      break;                                                      \
    case CompilerGymPass::OBJ_CARCOPT_PASS:                       \
      handlePass(llvm::ObjCARCOptPass());                         \
      break;                                                      \
    case CompilerGymPass::OPEN_MPOPT_PASS:                        \
      handlePass(llvm::OpenMPOptPass());                          \
      break;                                                      \
    case CompilerGymPass::PARTIAL_INLINER_PASS:                   \
      handlePass(llvm::PartialInlinerPass());                     \
      break;                                                      \
    case CompilerGymPass::PARTIALLY_INLINE_LIB_CALLS_PASS:        \
      handlePass(llvm::PartiallyInlineLibCallsPass());            \
      break;                                                      \
    case CompilerGymPass::PREDICATE_INFO_VERIFIER_PASS:           \
      handlePass(llvm::PredicateInfoVerifierPass());              \
      break;                                                      \
    case CompilerGymPass::PROMOTE_PASS:                           \
      handlePass(llvm::PromotePass());                            \
      break;                                                      \
    case CompilerGymPass::PSEUDO_PROBE_UPDATE_PASS:               \
      handlePass(llvm::PseudoProbeUpdatePass());                  \
      break;                                                      \
    case CompilerGymPass::REASSOCIATE_PASS:                       \
      handlePass(llvm::ReassociatePass());                        \
      break;                                                      \
    case CompilerGymPass::REDUNDANT_DBG_INST_ELIMINATION_PASS:    \
      handlePass(llvm::RedundantDbgInstEliminationPass());        \
      break;                                                      \
    case CompilerGymPass::REG_TO_MEM_PASS:                        \
      handlePass(llvm::RegToMemPass());                           \
      break;                                                      \
    case CompilerGymPass::REL_LOOKUP_TABLE_CONVERTER_PASS:        \
      handlePass(llvm::RelLookupTableConverterPass());            \
      break;                                                      \
    case CompilerGymPass::REVERSE_POST_ORDER_FUNCTION_ATTRS_PASS: \
      handlePass(llvm::ReversePostOrderFunctionAttrsPass());      \
      break;                                                      \
    case CompilerGymPass::REWRITE_STATEPOINTS_FOR_GC:             \
      handlePass(llvm::RewriteStatepointsForGC());                \
      break;                                                      \
    case CompilerGymPass::REWRITE_SYMBOL_PASS:                    \
      handlePass(llvm::RewriteSymbolPass());                      \
      break;                                                      \
    case CompilerGymPass::SCCPPASS:                               \
      handlePass(llvm::SCCPPass());                               \
      break;                                                      \
    case CompilerGymPass::SLPVECTORIZER_PASS:                     \
      handlePass(llvm::SLPVectorizerPass());                      \
      break;                                                      \
    case CompilerGymPass::SROA:                                   \
      handlePass(llvm::SROA());                                   \
      break;                                                      \
    case CompilerGymPass::SAMPLE_PROFILE_LOADER_PASS:             \
      handlePass(llvm::SampleProfileLoaderPass());                \
      break;                                                      \
    case CompilerGymPass::SCALARIZE_MASKED_MEM_INTRIN_PASS:       \
      handlePass(llvm::ScalarizeMaskedMemIntrinPass());           \
      break;                                                      \
    case CompilerGymPass::SCALARIZER_PASS:                        \
      handlePass(llvm::ScalarizerPass());                         \
      break;                                                      \
    case CompilerGymPass::SEPARATE_CONST_OFFSET_FROM_GEPPASS:     \
      handlePass(llvm::SeparateConstOffsetFromGEPPass());         \
      break;                                                      \
    case CompilerGymPass::SIMPLIFY_CFGPASS:                       \
      handlePass(llvm::SimplifyCFGPass());                        \
      break;                                                      \
    case CompilerGymPass::SINKING_PASS:                           \
      handlePass(llvm::SinkingPass());                            \
      break;                                                      \
    case CompilerGymPass::SPECULATIVE_EXECUTION_PASS:             \
      handlePass(llvm::SpeculativeExecutionPass());               \
      break;                                                      \
    case CompilerGymPass::STRAIGHT_LINE_STRENGTH_REDUCE_PASS:     \
      handlePass(llvm::StraightLineStrengthReducePass());         \
      break;                                                      \
    case CompilerGymPass::STRIP_DEAD_DEBUG_INFO_PASS:             \
      handlePass(llvm::StripDeadDebugInfoPass());                 \
      break;                                                      \
    case CompilerGymPass::STRIP_DEAD_PROTOTYPES_PASS:             \
      handlePass(llvm::StripDeadPrototypesPass());                \
      break;                                                      \
    case CompilerGymPass::STRIP_DEBUG_DECLARE_PASS:               \
      handlePass(llvm::StripDebugDeclarePass());                  \
      break;                                                      \
    case CompilerGymPass::STRIP_GCRELOCATES:                      \
      handlePass(llvm::StripGCRelocates());                       \
      break;                                                      \
    case CompilerGymPass::STRIP_NON_DEBUG_SYMBOLS_PASS:           \
      handlePass(llvm::StripNonDebugSymbolsPass());               \
      break;                                                      \
    case CompilerGymPass::STRIP_NON_LINE_TABLE_DEBUG_INFO_PASS:   \
      handlePass(llvm::StripNonLineTableDebugInfoPass());         \
      break;                                                      \
    case CompilerGymPass::STRIP_SYMBOLS_PASS:                     \
      handlePass(llvm::StripSymbolsPass());                       \
      break;                                                      \
    case CompilerGymPass::STRUCTURIZE_CFGPASS:                    \
      handlePass(llvm::StructurizeCFGPass());                     \
      break;                                                      \
    case CompilerGymPass::SYNTHETIC_COUNTS_PROPAGATION:           \
      handlePass(llvm::SyntheticCountsPropagation());             \
      break;                                                      \
    case CompilerGymPass::TAIL_CALL_ELIM_PASS:                    \
      handlePass(llvm::TailCallElimPass());                       \
      break;                                                      \
    case CompilerGymPass::UNIFY_FUNCTION_EXIT_NODES_PASS:         \
      handlePass(llvm::UnifyFunctionExitNodesPass());             \
      break;                                                      \
    case CompilerGymPass::UNIFY_LOOP_EXITS_PASS:                  \
      handlePass(llvm::UnifyLoopExitsPass());                     \
      break;                                                      \
    case CompilerGymPass::VECTOR_COMBINE_PASS:                    \
      handlePass(llvm::VectorCombinePass());                      \
      break;                                                      \
    case CompilerGymPass::WARN_MISSED_TRANSFORMATIONS_PASS:       \
      handlePass(llvm::WarnMissedTransformationsPass());          \
      break;                                                      \
    case CompilerGymPass::WHOLE_PROGRAM_DEVIRT_PASS:              \
      handlePass(llvm::WholeProgramDevirtPass());                 \
      break;                                                      \
  }
