// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.
//
// This file was automatically generated by make_action_space_sources.py.

#define HANDLE_ACTION(action, handlePass)                    \
  switch (action) {                                          \
    case CompilerGymPass::ADCE:                              \
      handlePass(llvm::ADCEPass());                          \
      break;                                                 \
    case CompilerGymPass::ADD_DISCRIMINATORS:                \
      handlePass(llvm::AddDiscriminatorsPass());             \
      break;                                                 \
    case CompilerGymPass::AGGRESSIVE_INST_COMBINE:           \
      handlePass(llvm::AggressiveInstCombinePass());         \
      break;                                                 \
    case CompilerGymPass::ALIGNMENT_FROM_ASSUMPTIONS:        \
      handlePass(llvm::AlignmentFromAssumptionsPass());      \
      break;                                                 \
    case CompilerGymPass::ALWAYS_INLINER:                    \
      handlePass(llvm::AlwaysInlinerPass());                 \
      break;                                                 \
    case CompilerGymPass::ANNOTATION2METADATA:               \
      handlePass(llvm::Annotation2MetadataPass());           \
      break;                                                 \
    case CompilerGymPass::ANNOTATION_REMARKS:                \
      handlePass(llvm::AnnotationRemarksPass());             \
      break;                                                 \
    case CompilerGymPass::ASSUME_BUILDER:                    \
      handlePass(llvm::AssumeBuilderPass());                 \
      break;                                                 \
    case CompilerGymPass::ASSUME_SIMPLIFY:                   \
      handlePass(llvm::AssumeSimplifyPass());                \
      break;                                                 \
    case CompilerGymPass::ATTRIBUTOR:                        \
      handlePass(llvm::AttributorPass());                    \
      break;                                                 \
    case CompilerGymPass::BDCE:                              \
      handlePass(llvm::BDCEPass());                          \
      break;                                                 \
    case CompilerGymPass::BLOCK_EXTRACTOR:                   \
      handlePass(llvm::BlockExtractorPass());                \
      break;                                                 \
    case CompilerGymPass::BREAK_CRITICAL_EDGES:              \
      handlePass(llvm::BreakCriticalEdgesPass());            \
      break;                                                 \
    case CompilerGymPass::CALL_SITE_SPLITTING:               \
      handlePass(llvm::CallSiteSplittingPass());             \
      break;                                                 \
    case CompilerGymPass::CALLED_VALUE_PROPAGATION:          \
      handlePass(llvm::CalledValuePropagationPass());        \
      break;                                                 \
    case CompilerGymPass::CANONICALIZE_ALIASES:              \
      handlePass(llvm::CanonicalizeAliasesPass());           \
      break;                                                 \
    case CompilerGymPass::CONSTANT_HOISTING:                 \
      handlePass(llvm::ConstantHoistingPass());              \
      break;                                                 \
    case CompilerGymPass::CONSTANT_MERGE:                    \
      handlePass(llvm::ConstantMergePass());                 \
      break;                                                 \
    case CompilerGymPass::CONSTRAINT_ELIMINATION:            \
      handlePass(llvm::ConstraintEliminationPass());         \
      break;                                                 \
    case CompilerGymPass::CORO_CLEANUP:                      \
      handlePass(llvm::CoroCleanupPass());                   \
      break;                                                 \
    case CompilerGymPass::CORO_EARLY:                        \
      handlePass(llvm::CoroEarlyPass());                     \
      break;                                                 \
    case CompilerGymPass::CORO_ELIDE:                        \
      handlePass(llvm::CoroElidePass());                     \
      break;                                                 \
    case CompilerGymPass::CORRELATED_VALUE_PROPAGATION:      \
      handlePass(llvm::CorrelatedValuePropagationPass());    \
      break;                                                 \
    case CompilerGymPass::CROSS_DSOCFI:                      \
      handlePass(llvm::CrossDSOCFIPass());                   \
      break;                                                 \
    case CompilerGymPass::DCE:                               \
      handlePass(llvm::DCEPass());                           \
      break;                                                 \
    case CompilerGymPass::DFAJUMP_THREADING:                 \
      handlePass(llvm::DFAJumpThreadingPass());              \
      break;                                                 \
    case CompilerGymPass::DSE:                               \
      handlePass(llvm::DSEPass());                           \
      break;                                                 \
    case CompilerGymPass::DEAD_ARGUMENT_ELIMINATION:         \
      handlePass(llvm::DeadArgumentEliminationPass());       \
      break;                                                 \
    case CompilerGymPass::DIV_REM_PAIRS:                     \
      handlePass(llvm::DivRemPairsPass());                   \
      break;                                                 \
    case CompilerGymPass::EARLY_CSE:                         \
      handlePass(llvm::EarlyCSEPass());                      \
      break;                                                 \
    case CompilerGymPass::ELIMINATE_AVAILABLE_EXTERNALLY:    \
      handlePass(llvm::EliminateAvailableExternallyPass());  \
      break;                                                 \
    case CompilerGymPass::FIX_IRREDUCIBLE:                   \
      handlePass(llvm::FixIrreduciblePass());                \
      break;                                                 \
    case CompilerGymPass::FLOAT2INT:                         \
      handlePass(llvm::Float2IntPass());                     \
      break;                                                 \
    case CompilerGymPass::FORCE_FUNCTION_ATTRS:              \
      handlePass(llvm::ForceFunctionAttrsPass());            \
      break;                                                 \
    case CompilerGymPass::FUNCTION_IMPORT:                   \
      handlePass(llvm::FunctionImportPass());                \
      break;                                                 \
    case CompilerGymPass::FUNCTION_SPECIALIZATION:           \
      handlePass(llvm::FunctionSpecializationPass());        \
      break;                                                 \
    case CompilerGymPass::GVN:                               \
      handlePass(llvm::GVN());                               \
      break;                                                 \
    case CompilerGymPass::GVNHOIST:                          \
      handlePass(llvm::GVNHoistPass());                      \
      break;                                                 \
    case CompilerGymPass::GVNSINK:                           \
      handlePass(llvm::GVNSinkPass());                       \
      break;                                                 \
    case CompilerGymPass::GLOBAL_DCE:                        \
      handlePass(llvm::GlobalDCEPass());                     \
      break;                                                 \
    case CompilerGymPass::GLOBAL_OPT:                        \
      handlePass(llvm::GlobalOptPass());                     \
      break;                                                 \
    case CompilerGymPass::GLOBAL_SPLIT:                      \
      handlePass(llvm::GlobalSplitPass());                   \
      break;                                                 \
    case CompilerGymPass::GUARD_WIDENING:                    \
      handlePass(llvm::GuardWideningPass());                 \
      break;                                                 \
    case CompilerGymPass::HELLO_WORLD:                       \
      handlePass(llvm::HelloWorldPass());                    \
      break;                                                 \
    case CompilerGymPass::HOT_COLD_SPLITTING:                \
      handlePass(llvm::HotColdSplittingPass());              \
      break;                                                 \
    case CompilerGymPass::IPSCCP:                            \
      handlePass(llvm::IPSCCPPass());                        \
      break;                                                 \
    case CompilerGymPass::IRCE:                              \
      handlePass(llvm::IRCEPass());                          \
      break;                                                 \
    case CompilerGymPass::IROUTLINER:                        \
      handlePass(llvm::IROutlinerPass());                    \
      break;                                                 \
    case CompilerGymPass::INFER_ADDRESS_SPACES:              \
      handlePass(llvm::InferAddressSpacesPass());            \
      break;                                                 \
    case CompilerGymPass::INFER_FUNCTION_ATTRS:              \
      handlePass(llvm::InferFunctionAttrsPass());            \
      break;                                                 \
    case CompilerGymPass::INJECT_TLIMAPPINGS:                \
      handlePass(llvm::InjectTLIMappings());                 \
      break;                                                 \
    case CompilerGymPass::INST_COMBINE:                      \
      handlePass(llvm::InstCombinePass());                   \
      break;                                                 \
    case CompilerGymPass::INST_SIMPLIFY:                     \
      handlePass(llvm::InstSimplifyPass());                  \
      break;                                                 \
    case CompilerGymPass::INSTRUCTION_NAMER:                 \
      handlePass(llvm::InstructionNamerPass());              \
      break;                                                 \
    case CompilerGymPass::INTERNALIZE:                       \
      handlePass(llvm::InternalizePass());                   \
      break;                                                 \
    case CompilerGymPass::JUMP_THREADING:                    \
      handlePass(llvm::JumpThreadingPass());                 \
      break;                                                 \
    case CompilerGymPass::LCSSA:                             \
      handlePass(llvm::LCSSAPass());                         \
      break;                                                 \
    case CompilerGymPass::LIB_CALLS_SHRINK_WRAP:             \
      handlePass(llvm::LibCallsShrinkWrapPass());            \
      break;                                                 \
    case CompilerGymPass::LOAD_STORE_VECTORIZER:             \
      handlePass(llvm::LoadStoreVectorizerPass());           \
      break;                                                 \
    case CompilerGymPass::LOOP_DATA_PREFETCH:                \
      handlePass(llvm::LoopDataPrefetchPass());              \
      break;                                                 \
    case CompilerGymPass::LOOP_DISTRIBUTE:                   \
      handlePass(llvm::LoopDistributePass());                \
      break;                                                 \
    case CompilerGymPass::LOOP_EXTRACTOR:                    \
      handlePass(llvm::LoopExtractorPass());                 \
      break;                                                 \
    case CompilerGymPass::LOOP_FUSE:                         \
      handlePass(llvm::LoopFusePass());                      \
      break;                                                 \
    case CompilerGymPass::LOOP_LOAD_ELIMINATION:             \
      handlePass(llvm::LoopLoadEliminationPass());           \
      break;                                                 \
    case CompilerGymPass::LOOP_SIMPLIFY:                     \
      handlePass(llvm::LoopSimplifyPass());                  \
      break;                                                 \
    case CompilerGymPass::LOOP_SINK:                         \
      handlePass(llvm::LoopSinkPass());                      \
      break;                                                 \
    case CompilerGymPass::LOOP_UNROLL:                       \
      handlePass(llvm::LoopUnrollPass());                    \
      break;                                                 \
    case CompilerGymPass::LOOP_VECTORIZE:                    \
      handlePass(llvm::LoopVectorizePass());                 \
      break;                                                 \
    case CompilerGymPass::LOOP_VERSIONING:                   \
      handlePass(llvm::LoopVersioningPass());                \
      break;                                                 \
    case CompilerGymPass::LOWER_ATOMIC:                      \
      handlePass(llvm::LowerAtomicPass());                   \
      break;                                                 \
    case CompilerGymPass::LOWER_CONSTANT_INTRINSICS:         \
      handlePass(llvm::LowerConstantIntrinsicsPass());       \
      break;                                                 \
    case CompilerGymPass::LOWER_EXPECT_INTRINSIC:            \
      handlePass(llvm::LowerExpectIntrinsicPass());          \
      break;                                                 \
    case CompilerGymPass::LOWER_GUARD_INTRINSIC:             \
      handlePass(llvm::LowerGuardIntrinsicPass());           \
      break;                                                 \
    case CompilerGymPass::LOWER_INVOKE:                      \
      handlePass(llvm::LowerInvokePass());                   \
      break;                                                 \
    case CompilerGymPass::LOWER_MATRIX_INTRINSICS:           \
      handlePass(llvm::LowerMatrixIntrinsicsPass());         \
      break;                                                 \
    case CompilerGymPass::LOWER_SWITCH:                      \
      handlePass(llvm::LowerSwitchPass());                   \
      break;                                                 \
    case CompilerGymPass::LOWER_TYPE_TESTS:                  \
      handlePass(llvm::LowerTypeTestsPass());                \
      break;                                                 \
    case CompilerGymPass::LOWER_WIDENABLE_CONDITION:         \
      handlePass(llvm::LowerWidenableConditionPass());       \
      break;                                                 \
    case CompilerGymPass::MAKE_GUARDS_EXPLICIT:              \
      handlePass(llvm::MakeGuardsExplicitPass());            \
      break;                                                 \
    case CompilerGymPass::MEM_CPY_OPT:                       \
      handlePass(llvm::MemCpyOptPass());                     \
      break;                                                 \
    case CompilerGymPass::MERGE_FUNCTIONS:                   \
      handlePass(llvm::MergeFunctionsPass());                \
      break;                                                 \
    case CompilerGymPass::MERGE_ICMPS:                       \
      handlePass(llvm::MergeICmpsPass());                    \
      break;                                                 \
    case CompilerGymPass::MERGED_LOAD_STORE_MOTION:          \
      handlePass(llvm::MergedLoadStoreMotionPass());         \
      break;                                                 \
    case CompilerGymPass::META_RENAMER:                      \
      handlePass(llvm::MetaRenamerPass());                   \
      break;                                                 \
    case CompilerGymPass::MODULE_INLINER_WRAPPER:            \
      handlePass(llvm::ModuleInlinerWrapperPass());          \
      break;                                                 \
    case CompilerGymPass::NAME_ANON_GLOBAL:                  \
      handlePass(llvm::NameAnonGlobalPass());                \
      break;                                                 \
    case CompilerGymPass::NARY_REASSOCIATE:                  \
      handlePass(llvm::NaryReassociatePass());               \
      break;                                                 \
    case CompilerGymPass::NEW_GVN:                           \
      handlePass(llvm::NewGVNPass());                        \
      break;                                                 \
    case CompilerGymPass::OBJ_CARCAPELIM:                    \
      handlePass(llvm::ObjCARCAPElimPass());                 \
      break;                                                 \
    case CompilerGymPass::OBJ_CARCCONTRACT:                  \
      handlePass(llvm::ObjCARCContractPass());               \
      break;                                                 \
    case CompilerGymPass::OBJ_CARCEXPAND:                    \
      handlePass(llvm::ObjCARCExpandPass());                 \
      break;                                                 \
    case CompilerGymPass::OBJ_CARCOPT:                       \
      handlePass(llvm::ObjCARCOptPass());                    \
      break;                                                 \
    case CompilerGymPass::OPEN_MPOPT:                        \
      handlePass(llvm::OpenMPOptPass());                     \
      break;                                                 \
    case CompilerGymPass::PARTIAL_INLINER:                   \
      handlePass(llvm::PartialInlinerPass());                \
      break;                                                 \
    case CompilerGymPass::PARTIALLY_INLINE_LIB_CALLS:        \
      handlePass(llvm::PartiallyInlineLibCallsPass());       \
      break;                                                 \
    case CompilerGymPass::PREDICATE_INFO_VERIFIER:           \
      handlePass(llvm::PredicateInfoVerifierPass());         \
      break;                                                 \
    case CompilerGymPass::PROMOTE:                           \
      handlePass(llvm::PromotePass());                       \
      break;                                                 \
    case CompilerGymPass::PSEUDO_PROBE_UPDATE:               \
      handlePass(llvm::PseudoProbeUpdatePass());             \
      break;                                                 \
    case CompilerGymPass::REASSOCIATE:                       \
      handlePass(llvm::ReassociatePass());                   \
      break;                                                 \
    case CompilerGymPass::REDUNDANT_DBG_INST_ELIMINATION:    \
      handlePass(llvm::RedundantDbgInstEliminationPass());   \
      break;                                                 \
    case CompilerGymPass::REG_TO_MEM:                        \
      handlePass(llvm::RegToMemPass());                      \
      break;                                                 \
    case CompilerGymPass::REL_LOOKUP_TABLE_CONVERTER:        \
      handlePass(llvm::RelLookupTableConverterPass());       \
      break;                                                 \
    case CompilerGymPass::REVERSE_POST_ORDER_FUNCTION_ATTRS: \
      handlePass(llvm::ReversePostOrderFunctionAttrsPass()); \
      break;                                                 \
    case CompilerGymPass::REWRITE_STATEPOINTS_FOR_GC:        \
      handlePass(llvm::RewriteStatepointsForGC());           \
      break;                                                 \
    case CompilerGymPass::REWRITE_SYMBOL:                    \
      handlePass(llvm::RewriteSymbolPass());                 \
      break;                                                 \
    case CompilerGymPass::SCCP:                              \
      handlePass(llvm::SCCPPass());                          \
      break;                                                 \
    case CompilerGymPass::SLPVECTORIZER:                     \
      handlePass(llvm::SLPVectorizerPass());                 \
      break;                                                 \
    case CompilerGymPass::SROA:                              \
      handlePass(llvm::SROA());                              \
      break;                                                 \
    case CompilerGymPass::SAMPLE_PROFILE_LOADER:             \
      handlePass(llvm::SampleProfileLoaderPass());           \
      break;                                                 \
    case CompilerGymPass::SCALARIZE_MASKED_MEM_INTRIN:       \
      handlePass(llvm::ScalarizeMaskedMemIntrinPass());      \
      break;                                                 \
    case CompilerGymPass::SCALARIZER:                        \
      handlePass(llvm::ScalarizerPass());                    \
      break;                                                 \
    case CompilerGymPass::SEPARATE_CONST_OFFSET_FROM_GEP:    \
      handlePass(llvm::SeparateConstOffsetFromGEPPass());    \
      break;                                                 \
    case CompilerGymPass::SIMPLIFY_CFG:                      \
      handlePass(llvm::SimplifyCFGPass());                   \
      break;                                                 \
    case CompilerGymPass::SINKING:                           \
      handlePass(llvm::SinkingPass());                       \
      break;                                                 \
    case CompilerGymPass::SPECULATIVE_EXECUTION:             \
      handlePass(llvm::SpeculativeExecutionPass());          \
      break;                                                 \
    case CompilerGymPass::STRAIGHT_LINE_STRENGTH_REDUCE:     \
      handlePass(llvm::StraightLineStrengthReducePass());    \
      break;                                                 \
    case CompilerGymPass::STRIP_DEAD_DEBUG_INFO:             \
      handlePass(llvm::StripDeadDebugInfoPass());            \
      break;                                                 \
    case CompilerGymPass::STRIP_DEAD_PROTOTYPES:             \
      handlePass(llvm::StripDeadPrototypesPass());           \
      break;                                                 \
    case CompilerGymPass::STRIP_DEBUG_DECLARE:               \
      handlePass(llvm::StripDebugDeclarePass());             \
      break;                                                 \
    case CompilerGymPass::STRIP_GCRELOCATES:                 \
      handlePass(llvm::StripGCRelocates());                  \
      break;                                                 \
    case CompilerGymPass::STRIP_NON_DEBUG_SYMBOLS:           \
      handlePass(llvm::StripNonDebugSymbolsPass());          \
      break;                                                 \
    case CompilerGymPass::STRIP_NON_LINE_TABLE_DEBUG_INFO:   \
      handlePass(llvm::StripNonLineTableDebugInfoPass());    \
      break;                                                 \
    case CompilerGymPass::STRIP_SYMBOLS:                     \
      handlePass(llvm::StripSymbolsPass());                  \
      break;                                                 \
    case CompilerGymPass::STRUCTURIZE_CFG:                   \
      handlePass(llvm::StructurizeCFGPass());                \
      break;                                                 \
    case CompilerGymPass::SYNTHETIC_COUNTS_PROPAGATION:      \
      handlePass(llvm::SyntheticCountsPropagation());        \
      break;                                                 \
    case CompilerGymPass::TAIL_CALL_ELIM:                    \
      handlePass(llvm::TailCallElimPass());                  \
      break;                                                 \
    case CompilerGymPass::UNIFY_FUNCTION_EXIT_NODES:         \
      handlePass(llvm::UnifyFunctionExitNodesPass());        \
      break;                                                 \
    case CompilerGymPass::UNIFY_LOOP_EXITS:                  \
      handlePass(llvm::UnifyLoopExitsPass());                \
      break;                                                 \
    case CompilerGymPass::VECTOR_COMBINE:                    \
      handlePass(llvm::VectorCombinePass());                 \
      break;                                                 \
    case CompilerGymPass::WARN_MISSED_TRANSFORMATIONS:       \
      handlePass(llvm::WarnMissedTransformationsPass());     \
      break;                                                 \
    case CompilerGymPass::WHOLE_PROGRAM_DEVIRT:              \
      handlePass(llvm::WholeProgramDevirtPass());            \
      break;                                                 \
  }
